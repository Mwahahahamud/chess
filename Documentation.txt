Unaltered files: Main,  IllegalMoveException, InvalidPositionException, Position, PieceColor
New files: Pawn, Bishop, Knight, Rook, Queen, King
Altered files: Board, Piece, Player

Overview of changes:
Board: Changed the initialisation of the pieces (i.e. instead of new Piece(arguments...) it is new Rook(arguments...), etc).
Player: References to Piece.KING_VALUE are changed to King.KING_VALUE
The extension work was not done.


Piece: It is now an abstract class.
	The methods changed are:
		validNextPositions(): Now an abstract method. Every case for the switch statement is now put inside the respective class.
				      Therefore, the logic for calculating the valid moves for each piece is unchanged.
		name():  Now an abstract method. It returns this.name (annoyingly just keeping the name method in the Piece class caused it
			 to fail the automated testing, even if it had the same effect and duplicated less code)
		value(): Now an abstract method. Every case for the switch statement is now put inside the respective class.
		icon():  Now an abstract method. Every case for the switch statement is now put inside the respective class.
		computePawnNextPositions():   This is moved to the Pawn class
		addPawnPositionIfValid():     This is moved to the Pawn class
		computeKnightNextPositions(): This is moved to the Knight class
	The fields changed are:
		this.KING_VALUE: It is now a static field belonging to the class King, not Piece.


New classes:
There is no "original" code; everything was copied and pasted from Piece into the respective class. 
